#!/usr/bin/env python3


import subprocess as sp
import argparse
import sys


def collect_test_options(cls):

    tests = []
    for method in dir(cls):
        if method.startswith("_run_test_"):
            test_option = method.replace("_run_test_", "").replace("_", "-")
            tests.append(test_option)

    cls._tests = tests
    return cls


@collect_test_options
class TestRunner:
    def __init__(self, rust_version):
        self.rust_version = rust_version

    def print_preamble(self):
        print("Rust version:")
        sp.check_call(["rustc", f"+{self.rust_version}", "--version"])
        print("Cargo version:")
        sp.check_call(["cargo", f"+{self.rust_version}", "--version"])
        print()

    def run(self, test):
        method = getattr(self, f"_run_test_{test.replace('-', '_')}", None)
        if not method:
            raise NotImplementedError(test)
        method()

    def _run_cargo(self, *args):
        cmd = ["cargo", f"+{self.rust_version}"] + list(args)
        print(f"Running {' '.join(cmd)}")
        try:
            sp.check_call(cmd)
        except sp.CalledProcessError as e:
            print(f"test failed with exit code {e.returncode}", file=sys.stderr)
            sys.exit(e.returncode)
        print()

    def _run_test_workspace(self):
        self._run_cargo("test")

    def _run_test_clippy(self):
        self._run_cargo(
            "clippy",
            "--",
            "-D",
            "warnings",
            # specific allow of clippy lints
            "-A",
            "clippy::non-send-fields-in-send-ty",
        )

    def _run_test_full_example(self):
        self._run_cargo(
            "run", "--manifest-path", "fitsio/Cargo.toml", "--example", "full_example"
        )

    def _run_test_array(self):
        self._run_cargo(
            "test", "--manifest-path", "fitsio/Cargo.toml", "--features", "array"
        )

    def _run_test_fitsio_src(self):
        self._run_cargo(
            "test",
            "--manifest-path",
            "fitsio/Cargo.toml",
            "--features",
            "fitsio-src",
        )

    def _run_test_fitsio_src_and_bindgen(self):
        self._run_cargo(
            "test",
            "--manifest-path",
            "fitsio/Cargo.toml",
            "--features",
            "fitsio-src",
            "--features",
            "bindgen",
        )

    def _run_test_bindgen(self):
        self._run_cargo(
            "test",
            "--manifest-path",
            "fitsio/Cargo.toml",
            "--features",
            "bindgen",
            "--no-default-features",
        )

    def _run_test_all(self):
        for test_name in self._tests:
            if test_name == "all":
                continue

            method_name = f"_run_test_{test_name.replace('-', '_')}"
            method = getattr(self, method_name)
            method()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-r",
        "--rust-version",
        required=False,
        default="stable",
    )
    parser.add_argument(
        "-t",
        "--test",
        required=False,
        default="all",
        choices=TestRunner._tests,
    )
    args = parser.parse_args()

    runner = TestRunner(args.rust_version)
    runner.print_preamble()
    runner.run(test=args.test)
